// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import '@capacitor/preferences';

// Initialize the client properly with exact URLs
const SUPABASE_URL = "https://gnvlzzqtmxrfvkdydxet.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imdudmx6enF0bXhyZnZrZHlkeGV0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDEzNTM0OTcsImV4cCI6MjA1NjkyOTQ5N30.N4ALQNrQ6UMtbWsdYo_GI581WP4LzCgGpTj8IKwJHDo";

// Site URL must match what's configured in Supabase
const SITE_URL = "https://gnvlzzqtmxrfvkdydxet.supabase.co";

// For both native and web, use the URL configured in Google Cloud Console
// Google doesn't accept custom URL schemes in their OAuth configuration
const REDIRECT_URL = "https://introgy.ai/auth/callback";

// Log the redirect URL for debugging
try {
  if (typeof window !== 'undefined') {
    console.log(`Using redirect URL: ${REDIRECT_URL}`);
    localStorage.setItem('supabase_redirect_url', REDIRECT_URL);
  }
} catch (err) {
  console.error('Error setting redirect URL in localStorage:', err);
}

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Helper function to process auth redirects
const processAuthRedirect = async (url: string) => {
  console.log('Processing auth redirect:', url);
  
  // Get the token from fragment or query params
  let params;
  
  if (url.includes('#')) {
    // Fragment format: url#access_token=...&refresh_token=...
    const fragment = url.split('#')[1];
    params = new URLSearchParams(fragment);
  } else if (url.includes('?')) {
    // Query format: url?code=...
    const query = url.split('?')[1];
    params = new URLSearchParams(query);
  } else {
    console.error('No tokens found in URL');
    return;
  }
  
  // Log all parameters to debug
  console.log('URL parameters:', Object.fromEntries([...params.entries()]));
  
  try {
    if (params.has('access_token')) {
      // Handle fragment response (implicit flow)
      const accessToken = params.get('access_token')!;
      const refreshToken = params.get('refresh_token');
      
      const { data, error } = await supabase.auth.setSession({
        access_token: accessToken,
        refresh_token: refreshToken || undefined
      });
      
      if (error) throw error;
      console.log('Session set successfully via tokens');
      
      // Dispatch event for components to react
      window.dispatchEvent(new CustomEvent('supabase.auth.signIn', { 
        detail: { session: data.session } 
      }));
    } else if (params.has('code')) {
      // Handle authorization code flow
      const code = params.get('code')!;
      console.log('Found authorization code, exchanging for session');
      
      // Let Supabase SDK handle this automatically
      const { data, error } = await supabase.auth.exchangeCodeForSession(code);
      
      if (error) throw error;
      console.log('Session retrieved after code exchange');
      
      // Dispatch event for components to react
      window.dispatchEvent(new CustomEvent('supabase.auth.signIn', { 
        detail: { session: data.session } 
      }));
    }
  } catch (error) {
    console.error('Auth redirect handling error:', error);
    localStorage.setItem('auth_redirect_error', JSON.stringify(error));
    
    // Dispatch error event
    window.dispatchEvent(new CustomEvent('supabase.auth.error', { 
      detail: error 
    }));
  }
};

// Type declaration for window to add our debug function
declare global {
  interface Window {
    checkSupabaseAuth?: () => any;
    SUPABASE_SITE_URL?: string;
    SUPABASE_REDIRECT_URL?: string;
    Capacitor?: {
      getPlatform: () => string;
      isNativePlatform: () => boolean;
      Plugins?: {
        App: {
          addListener: (eventName: string, callback: (data: any) => void) => void;
        };
        Preferences: {
          get: (options: { key: string }) => Promise<{ value: string | null }>;
          set: (options: { key: string; value: string }) => Promise<void>;
          remove: (options: { key: string }) => Promise<void>;
        };
      };
    };
  }
}

// CRITICAL: Store these values in the window object for runtime access
// This ensures these values are available globally and can be inspected in browser console
try {
  if (typeof window !== 'undefined') {
    window.SUPABASE_SITE_URL = SITE_URL;
    window.SUPABASE_REDIRECT_URL = REDIRECT_URL;
  }
} catch (err) {
  console.error('Error setting up window globals:', err);
}

// Create the Supabase client with platform-specific configuration
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true, // Always detect session in URL
    storage: {
      getItem: async (key: string) => {
        try {
          if (window.Capacitor?.getPlatform() === 'ios') {
            // Use Capacitor Preferences plugin for iOS
            const { value } = await window.Capacitor.Plugins.Preferences.get({ key });
            return value;
          }
          return window.localStorage.getItem(key);
        } catch (error) {
          console.error('Storage getItem error:', error);
          return null;
        }
      },
      setItem: async (key: string, value: string) => {
        try {
          if (window.Capacitor?.getPlatform() === 'ios') {
            // Use Capacitor Preferences plugin for iOS
            await window.Capacitor.Plugins.Preferences.set({ key, value });
          } else {
            window.localStorage.setItem(key, value);
          }
        } catch (error) {
          console.error('Storage setItem error:', error);
        }
      },
      removeItem: async (key: string) => {
        try {
          if (window.Capacitor?.getPlatform() === 'ios') {
            // Use Capacitor Preferences plugin for iOS
            await window.Capacitor.Plugins.Preferences.remove({ key });
          } else {
            window.localStorage.removeItem(key);
          }
        } catch (error) {
          console.error('Storage removeItem error:', error);
        }
      }
    }
  },
  global: {
    headers: {
      'x-application-name': 'introgy-app'
    }
  }
});

// Handle iOS Google Sign-In token exchange
// Set up deep link handling for iOS
try {
  if (typeof window !== 'undefined' && window.Capacitor?.isNativePlatform()) {
    console.log('Setting up deep link handler for native platform');
    window.Capacitor.Plugins.App.addListener('appUrlOpen', async ({ url }: { url: string }) => {
    console.log('Deep link received:', url);
    localStorage.setItem('deep_link_received', url);
    
    try {
      // Handle auth callbacks - check all possible patterns
      if (
        url.includes('auth.supabase.co/callback') || 
        url.includes('auth/callback') ||
        url.includes('auth/v1/callback') ||
        url.includes('introgy.ai/auth/callback')
      ) {
        console.log('OAuth callback URL detected:', url);
        localStorage.setItem('oauth_callback_received', 'true');
        
        // Process the URL to extract tokens or code
        await processAuthRedirect(url);
      }
      
      // Parse the URL
      let params: URLSearchParams;
      
      // Special handling for URL fragments which contain the tokens
      if (url.includes('#')) {
        const fragment = url.split('#')[1];
        params = new URLSearchParams(fragment);
        console.log('Found URL fragment, parsed params from fragment');
      } else {
        // If no fragment, try to parse as URL
        try {
          const urlObj = new URL(url);
          params = new URLSearchParams(urlObj.search);
          console.log('No fragment found, parsed params from URL search');
        } catch (e) {
          console.error('Error parsing URL:', e);
          // Fallback for malformed URLs - try to extract params manually
          const queryStart = url.indexOf('?');
          const queryString = queryStart >= 0 ? url.substring(queryStart + 1) : '';
          params = new URLSearchParams(queryString);
          console.log('Used fallback URL parsing');
        }
      }
      
      // Log all parameters for debugging
      const allParams = Object.fromEntries(params);
      console.log('URL parameters:', allParams);
      localStorage.setItem('deep_link_params', JSON.stringify(allParams));
      
      // Check for tokens
      const accessToken = params.get('access_token');
      const refreshToken = params.get('refresh_token');
      const idToken = params.get('id_token');
      const code = params.get('code'); // Also check for authorization code
      
      if (code) {
        // Handle authorization code flow
        console.log('Authorization code found, exchanging for tokens');
        localStorage.setItem('auth_code_found', code);
        
        try {
          // Exchange code for session
          const { data, error } = await supabase.auth.exchangeCodeForSession(code);
          
          if (error) {
            console.error('Error exchanging code for session:', error);
            localStorage.setItem('ios_auth_error', JSON.stringify(error));
            window.dispatchEvent(new CustomEvent('supabase.auth.error', { detail: error }));
            return;
          }
          
          console.log('Successfully exchanged code for session:', data);
          localStorage.setItem('ios_auth_success', JSON.stringify(data));
          
          // Notify of successful sign-in
          window.dispatchEvent(new CustomEvent('supabase.auth.signIn', { 
            detail: { session: data.session } 
          }));
        } catch (exchangeError) {
          console.error('Exception during code exchange:', exchangeError);
          localStorage.setItem('code_exchange_error', JSON.stringify(exchangeError));
          window.dispatchEvent(new CustomEvent('supabase.auth.error', { detail: exchangeError }));
        }
      } else if (idToken) {
        console.log('ID token found, attempting Supabase sign in');
        const { data: authData, error } = await supabase.auth.signInWithIdToken({
          provider: 'google',
          token: idToken,
          access_token: accessToken || undefined
        });
        
        if (error) {
          console.error('Error signing in with ID token:', error);
          localStorage.setItem('ios_auth_error', JSON.stringify(error));
          window.dispatchEvent(new CustomEvent('supabase.auth.error', { detail: error }));
          return;
        }
        
        console.log('Successfully signed in with ID token:', authData);
        localStorage.setItem('ios_auth_success', JSON.stringify(authData));
      } else if (accessToken) {
        console.log('Access token found, setting session');
        const { data, error } = await supabase.auth.setSession({
          access_token: accessToken,
          refresh_token: refreshToken || null
        });
        
        if (error) {
          console.error('Error setting session:', error);
          localStorage.setItem('ios_auth_error', JSON.stringify(error));
          window.dispatchEvent(new CustomEvent('supabase.auth.error', { detail: error }));
          return;
        }
        
        console.log('Session set successfully:', data);
        localStorage.setItem('ios_auth_success', JSON.stringify(data));
      } else {
        console.error('No tokens or code found in URL');
        localStorage.setItem('ios_auth_missing_token', 'true');
        window.dispatchEvent(new CustomEvent('supabase.auth.error', { 
          detail: { message: 'No tokens or code found in URL' } 
        }));
        return;
      }
      
      // Force a session refresh and emit auth state change
      const { data: { session } } = await supabase.auth.getSession();
      if (session) {
        console.log('Updated session:', session);
        window.dispatchEvent(new CustomEvent('supabase.auth.signIn', { 
          detail: { session } 
        }));
        
        // Set up session refresh interval
        const refreshInterval = setInterval(async () => {
          const { data: { session } } = await supabase.auth.getSession();
          if (!session) {
            clearInterval(refreshInterval);
          }
        }, 4 * 60 * 1000); // Refresh every 4 minutes
      }
    } catch (err) {
      console.error('Exception during deep link handling:', err);
      localStorage.setItem('deep_link_error', JSON.stringify(err));
      window.dispatchEvent(new CustomEvent('supabase.auth.error', { detail: err }));
    }
  });
  }
} catch (err) {
  console.error('Error setting up deep link handler:', err);
}
// Create a global debugging function to check auth configuration
try {
  if (typeof window !== 'undefined') {
    window.checkSupabaseAuth = () => {
  console.log('Current Supabase Auth Configuration:');
  console.log('SITE_URL:', SITE_URL);
  console.log('REDIRECT_URL:', REDIRECT_URL);
  console.log('Auth Config:', (supabase.auth as any).config);
  
  // Log to localStorage for persistence
  localStorage.setItem('supabase_debug_site_url', SITE_URL);
  localStorage.setItem('supabase_debug_redirect_url', REDIRECT_URL);
  
  return {
    siteUrl: SITE_URL,
    redirectUrl: REDIRECT_URL,
    authConfig: (supabase.auth as any).config
  };
    };
  }
} catch (err) {
  console.error('Error setting up debug function:', err);
}

// Export constants for use in other files
export { SUPABASE_URL, SITE_URL, REDIRECT_URL, SUPABASE_PUBLISHABLE_KEY };